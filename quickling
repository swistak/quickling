#!/bin/bash

site=$1
site_type=${2:-rails}
db_type=${3:-postgres}

quickling_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

if [ -z $site ] 
then
  echo "Usage:"
  echo "quickling domain.pl [rails|php] [postgres|mysql]"
  exit -1
fi

mkdir -p /repo
cd /repo
if [ -d $site.git ] 
then
  read -p "/repo/$site.git already exists. Override? (y/N) " -r
  if [[ $REPLY =~ ^[Yy]$ ]] 
  then
    rm -rf $site.git
  else
    exit 1
  fi
fi

mkdir "$site.git"
cd $site.git
git init . --bare --shared
chown -R www:www .

renv=${RAILS_ENV:-production}
cd hooks
rm *
for hook in $quickling_dir/hooks/*; do
  dst=`basename "$hook"`
  cat $hook | sed "s/%domain/$site/g" | sed "s/%renv/$renv/g" > $dst;
done
echo "Hooks created"
chmod 777 *

mkdir -p /srv
cd /srv
if [ -d $site ] 
then
  read -p "/srv/$site already exists. Override? (y/N) " -r
  if [[ $REPLY =~ ^[Yy]$ ]] 
  then
    rm -rf $site
  else
    exit 1
  fi
fi

git clone /repo/$site.git
chown -R www:www $site
cd $site

echo "Cloned application."

if [ -e /etc/nginx/sites/$site ]
then
  read -p "/etc/nginx/sites/$site already exists. Override? (y/N) " -r
  if [[ ! $REPLY =~ ^[Yy]$ ]] 
  then
    exit 1
  fi
fi

cat $quickling_dir/nginx-sites/$site_type | sed "s/%domain/$site/g" > /etc/nginx/sites/$site
ln -s /etc/nginx/sites{,-enabled}/$site

echo "Created nginx site."

mkdir -p /etc/databases
$quickling_dir/db/${db_type}.sh "$site"


cat <<DOC

************************************************************************

Ok. You're all set up! (I hope), anyway:
git clone ssh://www@$site/repo/$site.git # For new project
git remote add $site ssh://www@$site/repo/$site.git # For existing project

/etc/init/nginx restart # When you're ready

DOC


